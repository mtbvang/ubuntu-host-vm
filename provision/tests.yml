---
# Tests common to both Packer and Vagrant provisioning steps.
- name: Run tests
  hosts:
    - all
    - localhost
  become: yes
  become_user: "{{ user }}"
  vars:
    ignore_errors: no
    user: 'vagrant'
  tasks:
    - name: Test docker by running hello world image
      shell: >
        docker --version
      register: output
      failed_when:
        - '"Docker version" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,docker,testdocker
    - name: Test git secret
      shell: >
        git-secret
      register: output
      failed_when:
        - '"no input parameters provided" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gitsecret,gitsecrettest
    - name: Test ssh config
      lineinfile:
        path: '/home/{{ user }}/.ssh/config'
        regexp: '^UseKeychain'
        state: absent
      check_mode: no
      register: output
      failed_when: (output is changed) or (output is failed)
      ignore_errors: ignore_errors
      tags: test,terragrunt,terragrunttest
    - name: Test aws-auth tool
      shell: >
        aws-auth
      register: output
      failed_when:
        - '"A script that makes it easier to use" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,awsauth,awsauthtest
    - name: Test openvpn-admin tool
      shell: >
        openvpn-admin -v
      register: output
      failed_when:
        - '"v0.9.2" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,openvpnadmin,openvpnadmintest
    - name: Test gruntwork installer
      shell: >
        gruntwork-install
      register: output
      failed_when:
        - '"Download a Gruntwork Script Module and install it" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gruntworkinstaller,gruntworkinstallertest
    - name: Test terraform
      shell: >
        terraform version
      register: output
      failed_when:
      - '"v0.12.17" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,terraform,terraformtest
    - name: Test terraform alias
      lineinfile:
        path: '/home/{{ user }}/.bash_aliases'
        line: "alias tf='terraform'"
        state: present
      check_mode: no
      register: output
      failed_when: (output is changed) or (output is failed)
      ignore_errors: ignore_errors
      tags: test,terraform,terraformtest

    - name: Test aws cli
      shell: >
        aws --version
      register: output
      failed_when:
      - '"aws-cli/1.18.140" not in output.stderr'
      ignore_errors: ignore_errors
      tags: test,awscli,awsclitest

    - name: Test gruntwork cli
      shell: >
        gruntwork --version
      register: output
      failed_when:
      - '"v0.1.1" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gruntwork,gruntworktest,gruntworkcli,gruntworkclitest

#    - name: Test ssh config
#      shell: >
#        ssh -tt bastion
#      register: output
#      failed_when:
#      - '"Permission denied" not in output.stderr'
#      ignore_errors: ignore_errors
#      tags: test,sshconfig,testsshconfig

    - name: Test packer
      shell: >
        packer version
      register: output
      failed_when:
      - '"1.6.5" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,packer,packertest

#    - name: Test cloud nuke
#      shell: >
#        cloud-nuke -v
#      register: output
#      failed_when:
#        - '"v0.1.4" not in output.stdout'
#      ignore_errors: ignore_errors
#      tags: test,cloudnuke,cloudnuketest
#
#    - name: Test cloud-nuke cn alias
#      lineinfile:
#        path: '/home/{{ user }}/.bash_aliases'
#        line: "alias cn='cloud-nuke'"
#        state: present
#      check_mode: no
#      register: output
#      failed_when: (output | changed) or (output | failed)
#      ignore_errors: ignore_errors
#      tags: test,cloudnuke,cloudnuketest
#
    - name: Test terragrunt
      shell: >
        terragrunt -v
      register: output
      failed_when:
      - '"v0.21.10" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,terragrunt,terragrunttest

    - name: Test terragrunt alias
      lineinfile:
        path: '/home/{{ user }}/.bash_aliases'
        line: "alias tg='terragrunt'"
        state: present
      check_mode: no
      register: output
      failed_when: (output is changed) or (output is failed)
      ignore_errors: ignore_errors
      tags: test,terragrunt,terragrunttest

    - name: Test gruntworks terraform-update-variable
      shell: >
        terraform-update-variable --help
      register: output
      failed_when:
      - '"terraform-update-variable [OPTIONS]" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gruntworkshelpers,gruntworkshelperstest,terraformupdatevarialbe,terraformupdatevarialbetest
    - name: Test gruntworks build-helpers
      shell: >
        build-docker-image --help
      register: output
      failed_when:
      - '"build-docker-image [OPTIONS]" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gruntworksmoduleci,gruntworksmodulecitest
    - name: Test gruntkms
      shell: >
        gruntkms -v
      register: output
      failed_when:
      - '"v0.0.8" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gruntkms,gruntkmstest
    - name: Test ecs-deploy module run-ecs-task
      shell: >
        run-ecs-task
      register: output
      failed_when:
      - '"Run a single ECS Task" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,gruntworksmoduleecs,gruntworksmoduleecstest
    - name: Test Zoom installed
      shell: >
        which zoom
      register: output
      failed_when:
        - '"/usr/bin/zoom" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,zoom,zoomtest
    - name: Test Slack installed
      shell: >
        which slack
      register: output
      failed_when:
        - '"/usr/bin/slack" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,slack,slacktest
    - name: Test GraphicsMagick installed
      shell: >
        gm version
      register: output
      failed_when:
        - '"GraphicsMagick 1.3" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,graphicsmagick,graphicsmagicktest
    - name: Test ImagesMagick installed
      shell: >
        magick -version
      register: output
      failed_when:
        - '"ImageMagick 7.0" not in output.stdout'
      ignore_errors: ignore_errors
      tags: test,graphicsmagick,graphicsmagicktest
