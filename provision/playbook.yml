---
# This playbook is used by both packer and vagrant and is to only contain non sensitive/public provisioning steps.
# It will produce a vagrant box file that will be uploaded to vagrant cloud for distribution.
- name: Provision
  become: yes
  become_user: "{{ user }}"
  hosts:
    - localhost
    - all
  vars:
    user: 'vagrant'
    _awscli_version: '1.18.140'
    _github_oauth_token: '{{ github_oauth_token }}'
    _packer_version: "1.4.2"
    _openvpn_admin: 'v0.9.2'
    _terraform_version: '0.12.17'
    _grunt_module_ci_version: 'v0.16.2'
    _ecs_deploy_version: 'v0.14.1'
    _terragrunt_version: 'v0.21.10'
    _grunt_kms_version: 'v0.0.8'
    _gruntwork_cli_version: '15088626'
    _aws_auth_version: 'v0.34.2'
    _nodejs_version: '12.14.1'
    _vmware_workstation_version: '15.5.6'
    _docker_version: '5:19.03.12~3-0~ubuntu-bionic'
    _postgresql_client_version: '11'

  pre_tasks:
  - name: Gathering facts
    setup:
  - name: Install required system packages
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - jq
      - openvpn
      - tree
      - xclip
      - ntpdate
      - dos2unix
      - groff
      - git-secret
      - python-boto3
      - dnsutils
      - time
      - zip
      - unzip
      - psutils
      - libegl1-mesa
      - curl
      - ca-certificates
      - gnupg
      - software-properties-common
      - tzdata
      - ca-certificates
      - python-pip
      - python3-pip
      - python3-dev
      - gettext
      - vim
      - bash-completion
      - iputils-ping
      - python-yaml
    become: true
    become_user: root
    tags: packages

  environment:
    GITHUB_OAUTH_TOKEN: "{{ github_oauth_token }}"

  roles:
  - role: nodejs
    nodejs_version: "12.x"
    become: true
    become_user: root
    tags: nodejs
  - role: zoom
    become: true
    become_user: root
    tags: zoom
  - role: docker
    docker_package: "docker-{{ docker_edition }}={{ _docker_version }}"
    docker_users:
      - "{{ user }}"
    docker_install_compose: true
    docker_compose_version: "1.26.0"
    docker_compose_path: /usr/local/bin/docker-compose
    become: true
    become_user: root
    tags: docker
  - role: awscli
    awscli_version: '{{ _awscli_version }}'
    become: true
    become_user: root
    tags: awscli
  - role: packer
    packer_version: '{{ _packer_version }}'
    become: true
    become_user: root
    tags: packer
  - role: chrome
    become: true
    become_user: root
    tags: chrome
  - role: intellij
    intellij_edition: ultimate
    intellij_version: '2020.2.1'
    intellij_download_dir: "{{ x_ansible_download_dir | default(ansible_env.HOME + '~/.ansible/tmp/downloads') }}"
    users:
      - username: vagrant
        intellij_plugins:
          - zielu.gittoolbox
          - org.intellij.plugins.hcl
          - name.kropp.intellij.makefile
          - org.jetbrains.plugins.ruby
          - com.alayouni.ansiHighlight
    become: true
    become_user: root
    tags: intellij
  - role: vscode
    become: true
    become_user: root
    tags: vscode
  - role: vagrant
    vagrant_version: "2.2.5"
    vagrant_virtualbox_install: False
    become: true
    become_user: root
    tags: vagrant
  - role: virtualbox
    virtualbox_state: 'present'
    virtualbox_apt_repo: 'deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bionic contrib'
    become: true
    become_user: root
    tags: virtualbox
  - role: terraform
    version: '{{ _terraform_version }}'
    become: true
    become_user: root
    tags: terraform
  - role: terragrunt
    terragrunt_install_version: '{{ _terragrunt_version }}'
    become: true
    become_user: root
    tags: terragrunt

  tasks:
  - name: Dconf - Enable Night Light
    dconf:
      key: "/org/gnome/settings-daemon/plugins/color/night-light-enabled"
      value: "true"
    tags: dconf
  - name: Dconf - Set Night Light Temperature
    dconf:
      key: "/org/gnome/settings-daemon/plugins/color/night-light-temperature"
      value: "uint32 5500"
    tags: dconf
  - name: Dconf - touchpad natural scroll
    dconf:
      key: "/org/gnome/desktop/peripherals/touchpad/natural"
      value: "false"
    tags: dconf
  - name: Dconf - touchpad speed
    dconf:
      key: "/org/gnome/desktop/peripherals/touchpad/speed"
      value: "0.27941176470588225"
    tags: dconf
  - name: Dconf - touchpad disable while typing
    dconf:
      key: "/org/gnome/desktop/peripherals/touchpad/disable-while-typing"
      value: "true"
    tags: dconf
  - name: Dconf - mouse natural-scroll
    dconf:
      key: "/org/gnome/desktop/peripherals/mouse/natural-scroll"
      value: "false"
    tags: dconf
  - name: Make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
    become: true
    become_user: root
    tags: docker
  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
    become: true
    become_user: root
    tags: docker
  - name: Add the user {{ user }} to docker and wheel group to allow passwordless sudo
    user:
      name: '{{ user }}'
      groups: docker,wheel
    become: true
    become_user: root
    tags: docker
  - name: Delete the following JSON key/value from ~/.docker/config.json. Fix for issue https://github.com/docker/docker-credential-helpers/issues/149
    lineinfile:
      path: '/home/{{ user }}/.docker/config.json'
      state: absent
      regexp: 'credsStore'
    tags: docker
  - name: Make sure mac os ssh use keychain config not present
    lineinfile:
      path: '/home/{{ user }}/.ssh/config'
      state: absent
      regexp: '^UseKeychain'
  - name: Add aliases
    copy:
      src:  files/bash_aliases
      dest: ~/.bash_aliases
      mode: 0644
    tags: aliases
  - name: Install Gruntwork installer
    shell: '{{ item }}'
    with_items:
      - curl -LsS https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version v0.0.24
    args:
      creates: /usr/local/bin/gruntwork-install
    tags:
      - gruntworkinstaller
  - name: Install gruntworks module-ci scripts and helper modules. Requires gruntwork-install
    shell: "/usr/local/bin/gruntwork-install --module-name {{ item }} --repo https://github.com/gruntwork-io/module-ci --tag {{ _grunt_module_ci_version }}"
    with_items:
      - terraform-helpers
      - build-helpers
    become: true
    become_user: root
    args:
        creates: /usr/local/bin/build-docker-image
    tags: gruntworksmoduleci
  # FIXME rewrite this to pick up file permission changes.
  - name: Install openvpn-admin. Requires gruntwork-install
    shell: >
      gruntwork-install --binary-name openvpn-admin --repo https://github.com/gruntwork-io/package-openvpn --tag {{ _openvpn_admin }};
      chmod 0755 /usr/local/bin/openvpn-admin
    become: true
    become_user: root
    args:
      creates: /usr/local/bin/openvpn-admin
    tags: openvpnadmin
  - name: Install aws-auth. Requires gruntwork-install
    shell: "gruntwork-install --module-name 'aws-auth' --repo 'https://github.com/gruntwork-io/module-security' --tag {{ _aws_auth_version }}"
    become: true
    become_user: root
    args:
      creates: /usr/local/bin/aws-auth
    tags: awsauth
  - name: Install gruntkms. Requires gruntwork-install
    shell: >
      /usr/local/bin/gruntwork-install --binary-name 'gruntkms' --repo https://github.com/gruntwork-io/gruntkms --tag {{ _grunt_kms_version }};
      chmod 0755 /usr/local/bin/gruntkms
    args:
      creates: /usr/local/bin/gruntkms
    become: true
    become_user: root
    tags: gruntkms
  - name: Install gruntworks module-ecs scripts and helper modules. Requires gruntwork-install
    shell: "/usr/local/bin/gruntwork-install --module-name {{ item }} --repo https://github.com/gruntwork-io/module-ecs --tag {{ _ecs_deploy_version }}"
    with_items:
      - ecs-deploy
    become: true
    become_user: root
    tags: gruntworksmoduleecs

#FIXME use get_url or uri module rather than running 'curl'.
#  - name: Install gruntwork cli tool
#    get_url:
#      url: https://{{ github_oauth_token }}:@api.github.com/repos/gruntwork-io/gruntwork/releases/assets/{{ _gruntwork_cli_version }}
#      dest: /usr/local/bin/gruntwork
#      headers: "Authorization:token {{ github_oauth_token }},Accept: application/octet-stream"
#      mode: 0755
#    become: true
#    become_user: root
#    tags:
#      - gruntwork
#      - gruntworkcli
# To get the asset number for the download url run: curl --header 'Authorization: token ${GITHUB_OAUTH_TOKEN}' -L https://${GITHUB_OAUTH_TOKEN}:@api.github.com/repos/gruntwork-io/gruntwork/releases/latest
  - name: Install gruntwork cli tool
    shell: >
      curl --header 'Authorization: token {{ github_oauth_token }}' --header 'Accept: application/octet-stream' -L https://{{ github_oauth_token }}:@api.github.com/repos/gruntwork-io/gruntwork/releases/assets/{{ _gruntwork_cli_version }} -o gruntwork_linux_amd64;
      mv gruntwork_linux_amd64 /usr/local/bin/gruntwork;
      chmod 0755 /usr/local/bin/gruntwork
    args:
      chdir: /usr/local/bin/
      creates: gruntwork
    become: true
    become_user: root
    tags:
      - gruntwork
      - gruntworkcli

  - name: Set node version
    shell: >
      npm install --silent -g n;
      n {{ _nodejs_version }}
    become: true
    become_user: root
    tags:
      - nodejs

  - name: Check pg_dump version
    shell: >
      pg_dump -V
    register: pg_dump_version
    ignore_errors: true
    tags: postgresql
  - name: Install postgres client
    shell: >
      apt purge -y postgresql*;
      apt-get remove -y postgresql-client-common;
      wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - ;
      sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list';
      apt-get update -qq > /dev/null;
      apt-get -y install postgresql-client-{{ _postgresql_client_version }}
    when: pg_dump_version.stdout.find(_postgresql_client_version) == -1
    become: true
    become_user: root
    tags: postgresql

  - name: Install aws-encryption-cli
    pip:
      name:
        - aws-encryption-sdk==1.4.1
        - aws-encryption-sdk-cli==1.1.7
        - requests
    become: true
    become_user: root
    tags: awsencryptioncli