---
- name: Provision
  become: yes
  become_user: "{{ user }}"
  hosts:
    - all
  vars:
    user: 'vagrant'
    _awscli_version: '1.18.80'
    _github_oauth_token: '{{ github_oauth_token }}'
    _packer_version: "1.4.2"
    _openvpn_admin: 'v0.9.2'
    _terraform_version: '0.12.17'
    _grunt_module_ci_version: 'v0.16.2'
    _ecs_deploy_version: 'v0.14.1'
    _terragrunt_version: 'v0.21.10'
#    _golang_install_dir: '/opt/go/{{ _golang_version }}'
#    _cloudnuke_version: "0.1.4"
    _grunt_kms_version: 'v0.0.8'
    _gruntwork_cli_version: '15088626'
    _aws_auth_version: 'v0.34.2'
#    _docker_version: '18.06'

  pre_tasks:
  - name: Gathering facts
    setup:
  - name: Install required system packages
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - jq
      - openvpn
      - tree
      - xclip
      - ntpdate
      - dos2unix
      - groff
      - git-secret
      - docker.io
      - python-boto3
      - dnsutils
      - time
    become: true
    become_user: root
    tags: packages

  environment:
    GITHUB_OAUTH_TOKEN: "{{ github_oauth_token }}"

  roles:
  - role: awscli
    awscli_version: '{{ _awscli_version }}'
    become: true
    become_user: root
    tags: awscli
  - role: packer
    packer_version: '{{ _packer_version }}'
    become: true
    become_user: root
    tags: packer
  - role: chrome
    become: true
    become_user: root
    tags: chrome
  - role: intellij
    intellij_edition: ultimate
    become: true
    become_user: root
    tags: intellij
  - role: vscode
    become: true
    become_user: root
    tags: vscode
  - role: vagrant
    vagrant_version: "2.2.5"
    vagrant_virtualbox_install: False
    become: true
    become_user: root
    tags: vagrant
  - role: virtualbox
    virtualbox_state: 'present'
    virtualbox_apt_repo: 'deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian bionic contrib'
    become: true
    become_user: root
    tags: virtualbox
  - role: terraform
    version: '{{ _terraform_version }}'
    become: true
    become_user: root
    tags: terraform
  - role: terragrunt
    terragrunt_install_version: '{{ _terragrunt_version }}'
    become: true
    become_user: root
    tags: terragrunt

  tasks:
  - name: Make sure we have a 'wheel' group
    group:
      name: wheel
      state: present
    become: true
    become_user: root
    tags: docker
  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'
    become: true
    become_user: root
    tags: docker
  - name: Add the user {{ user }} to docker and wheel group to allow passwordless sudo
    user:
      name: '{{ user }}'
      groups: docker,wheel
    become: true
    become_user: root
    tags: docker
  - name: Delete the following JSON key/value from ~/.docker/config.json. Fix for issue https://github.com/docker/docker-credential-helpers/issues/149
    lineinfile:
      path: '/home/{{ user }}/.docker/config.json'
      state: absent
      regexp: 'credsStore'
    tags: docker
  - name: Make sure mac os ssh use keychain config not present
    lineinfile:
      path: '/home/{{ user }}/.ssh/config'
      state: absent
      regexp: '^UseKeychain'
  - name: Template a file to /etc/files.conf
    template:
      src: templates/bashrc.j2
      dest: '/home/{{ user }}/.bashrc'
      owner: '{{ user }}'
      mode: '0644'
  - name: Add aliases
    copy:
      src:  files/bash_aliases
      dest: ~/.bash_aliases
      mode: 0644
    tags: aliases
  - name: Install Gruntwork installer
    shell: '{{ item }}'
    with_items:
      - curl -LsS https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version v0.0.24
    args:
      creates: /usr/local/bin/gruntwork-install
    tags:
      - gruntworkinstaller
#  - name: Install cloud nuke tool
#    shell: >
#      wget https://github.com/gruntwork-io/cloud-nuke/releases/download/v{{_cloudnuke_version}}/cloud-nuke_linux_amd64
#      && mv cloud-nuke_linux_amd64 /usr/local/bin/cloud-nuke
#      && chmod 0755 /usr/local/bin/cloud-nuke
#    args:
#      chdir: /usr/local/bin/
#      creates: cloud-nuke
#    become: true
#    become_user: root
#    tags: cloudnuke
  - name: Install gruntworks module-ci scripts and helper modules. Requires gruntwork-install
    shell: "/usr/local/bin/gruntwork-install --module-name {{ item }} --repo https://github.com/gruntwork-io/module-ci --tag {{ _grunt_module_ci_version }}"
    with_items:
      - terraform-helpers
      - build-helpers
    become: true
    become_user: root
    tags: gruntworksmoduleci
# FIXME rewrite this to pick up file permission changes.
  - name: Install openvpn-admin. Requires gruntwork-install
    shell: >
      gruntwork-install --binary-name openvpn-admin --repo https://github.com/gruntwork-io/package-openvpn --tag {{ _openvpn_admin }}
      && chmod 0755 /usr/local/bin/openvpn-admin
    become: true
    become_user: root
    args:
      creates: /usr/local/bin/openvpn-admin
    tags: openvpnadmin
  - name: Install aws-auth. Requires gruntwork-install
    shell: "gruntwork-install --module-name 'aws-auth' --repo 'https://github.com/gruntwork-io/module-security' --tag {{ _aws_auth_version }}"
    become: true
    become_user: root
    args:
      creates: /usr/local/bin/aws-auth
    tags: awsauth
  - name: Install gruntkms. Requires gruntwork-install
    shell: >
      /usr/local/bin/gruntwork-install --binary-name 'gruntkms' --repo https://github.com/gruntwork-io/gruntkms --tag {{ _grunt_kms_version }}
      && chmod 0755 /usr/local/bin/gruntkms
    args:
      creates: /usr/local/bin/gruntkms
    become: true
    become_user: root
    tags: gruntkms
  - name: Install gruntworks module-ecs scripts and helper modules. Requires gruntwork-install
    shell: "/usr/local/bin/gruntwork-install --module-name {{ item }} --repo https://github.com/gruntwork-io/module-ecs --tag {{ _ecs_deploy_version }}"
    with_items:
      - ecs-deploy
    become: true
    become_user: root
    tags: gruntworksmoduleecs

#FIXME use get_url or uri module rather than running 'curl'.
#  - name: Install gruntwork cli tool
#    get_url:
#      url: https://{{ github_oauth_token }}:@api.github.com/repos/gruntwork-io/gruntwork/releases/assets/{{ _gruntwork_cli_version }}
#      dest: /usr/local/bin/gruntwork
#      headers: "Authorization:token {{ github_oauth_token }},Accept: application/octet-stream"
#      mode: 0755
#    become: true
#    become_user: root
#    tags:
#      - gruntwork
#      - gruntworkcli
# To get the asset number for the download url run: curl --header 'Authorization: token ${GITHUB_OAUTH_TOKEN}' -L https://${GITHUB_OAUTH_TOKEN}:@api.github.com/repos/gruntwork-io/gruntwork/releases/latest
  - name: Install gruntwork cli tool
    shell: >
      curl --header 'Authorization: token {{ github_oauth_token }}' --header 'Accept: application/octet-stream' -L https://{{ github_oauth_token }}:@api.github.com/repos/gruntwork-io/gruntwork/releases/assets/{{ _gruntwork_cli_version }} -o gruntwork_linux_amd64
      && mv gruntwork_linux_amd64 /usr/local/bin/gruntwork
      && chmod 0755 /usr/local/bin/gruntwork
    args:
      chdir: /usr/local/bin/
      creates: gruntwork
    become: true
    become_user: root
    tags:
      - gruntwork
      - gruntworkcli

